{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started with Python-powered OpenSCAD","text":""},{"location":"#enabling-python-support","title":"Enabling Python support","text":"<p>For Python support to be enabled, 2 conditions must be met:</p> <ol> <li>The <code>python-engine</code> feature must be enabled </li> <li>The extension of the file you're editing MUST be <code>.py</code>.</li> </ol> <p>If both those condition are met, then the file will be interpreted as a Python file.</p>"},{"location":"#differences-with-regular-openscad","title":"Differences with regular OpenSCAD","text":"<p>If you're familiar with regular OpenSCAD, then the synthax will be fairly obvious, as the names of functions and classes are the same.</p> <p>The major difference is that you need to use the <code>output()</code> function for a shape to be displayed, as opposed to it being displayed automatically in regular OpenSCAD.</p>"},{"location":"#creating-a-basic-shape","title":"Creating a basic shape","text":"<p>Lets create a 5x5x5 cube.</p> PythonOpenSCAD <pre><code># Create the cube object, and store it in variable \"c\"\nc = cube(5)\n# Or, more explicitely\nc = cube([5,5,5])\n# Display the cube\noutput(c)\n</code></pre> <pre><code>// Create the cube object\ncube(5);\n// Or, more explicitely\ncube([5,5,5]);\n// The cube is displayed implicitely\n</code></pre> <p>That was pretty easy! Next, let's see how to combine multiple shapes.</p>"},{"location":"combining_objects/","title":"Combining objects","text":""},{"location":"combining_objects/#displaying-multiple-shapes","title":"Displaying multiple shapes","text":"<p>If you tried calling output a second time, you will have noticed that is overwrites the previous call. For example: <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# We display the cube\noutput(cu)\n# We display the cylinder, which overwrites the previous output call\n# THE CUBE IS NO LONGER DISPLAYED\noutput(cy)\n</code></pre></p> <p>So how do we display multiple shapes? Simple! We pass them all to the output function using a list: <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Both objects are now displayed at once\noutput([cu,cy])\n</code></pre></p>"},{"location":"combining_objects/#combining-objects-with-union","title":"Combining objects with <code>union()</code>","text":"<p>Lets say you wanted to merge 2 objects into one, how could you do that? Well, you combine them with the <code>union()</code> method:</p> PythonOpenSCAD <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Create a third object that is a fusion of the cube and the cylinder\nfusion = cu.union(cy)\n# alternatively you can also write:\nfusion = union([cu, cy])\n# Display the new object\noutput(fusion)\n</code></pre> <pre><code>// Join the 2 objects into one\nunion() {    // Create a cube and a cylinder\ncube([5,5,5]);\ncylinder(5);\n}\n</code></pre> <p>One important thing to note is the fact the <code>union()</code> does NOT edit the objects in place. Rather, it creates a third brand new object. This means that:</p> <ul> <li>You must assign the union to a variable, just calling <code>cu.union(cy)</code> alone will have no effects on <code>cu</code> or <code>cy</code>.</li> <li>You keep access to the originals objects. For example, you could still display just the cube by using <code>output(cu)</code></li> </ul>"},{"location":"combining_objects/#substracting-objects-with-difference","title":"Substracting objects with <code>difference()</code>","text":"<p>You learned how to merge two objects into one, but what if you want to exclude an object from another? For that, you can use the <code>difference()</code> method:</p> PythonOpenSCAD <pre><code># Create a cube and a cylinder that overlap\ncu = cube([5,5,5], center = True)\ncy = cylinder(15, center = True)\n# Substract the cylinder from the cube\ndiff = cu.difference(cy)\n# Display the result\noutput(diff)\n</code></pre> <pre><code>// Use difference() to substract the cylinder from the cube\ndifference() {\n// Create a cube and a cylinder that overlap\ncube([5,5,5], center = true);\ncylinder(15, center = true);\n}\n</code></pre> <p>As you can see, this creates a cylinder-shaped hole in the cube!</p>"},{"location":"combining_objects/#using-operators","title":"Using operators","text":"<p>Using the <code>union</code> and <code>difference</code> method works great, but is a little heavy synthax-wise. You can instead simplify it by using operators!</p> <p>Here is a table detailing which operator matches each method:</p> Operator Method + union - difference * intersection <p>So, reusing our earlier examples, you could write <pre><code>cu = cube([5,5,5])\ncy = cylinder(5)\n# Replaces cu.union(cy)\nfusion = cu + cy\noutput(fusion)\n</code></pre></p> <p>Now that we know how to combine objects, lets see how we can position them.</p>"},{"location":"positioning_objects/","title":"Positioning objects","text":"<p>To move an object, you can simply use the <code>translate()</code> method:</p> PythonOpenSCAD <pre><code># Create two cubes\nc1 = cube([5,5,5])\nc2 = cube([3,3,10])\n# Translate the cube by 7 units up\nc2 = c2.translate([0,0,7])\n# Display the result\nresult = c1 + c2\noutput(result)\n</code></pre> <pre><code>// Create the first cube\ncube([5,5,5]);\n// Create the second cube, and apply\n// a translation of 7 units up\ntranslate([0,0,7])\ncube([3,3,10]);\n</code></pre> <p>Notice how we assign the result of the <code>translate()</code> method back into c2. This is because just like the <code>union()</code> and <code>difference()</code> methods we saw earlier, this method return a brand new object.</p>"}]}