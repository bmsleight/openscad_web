{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started with Python-powered OpenSCAD","text":""},{"location":"#enabling-python-support","title":"Enabling Python support","text":"<p>For Python support to be enabled, 2 conditions must be met:</p> <ol> <li>The <code>python-engine</code> feature must be enabled </li> <li>The extension of the file you're editing MUST be <code>.py</code>.</li> </ol> <p>If both those condition are met, then the file will be interpreted as a Python file.</p>"},{"location":"#differences-with-regular-openscad","title":"Differences with regular OpenSCAD","text":"<p>If you're familiar with regular OpenSCAD, then the synthax will be fairly obvious, as the names of functions and classes are the same.</p> <p>The major difference is that you need to use the <code>output()</code> function for a shape to be displayed, as opposed to it being displayed automatically in regular OpenSCAD.</p>"},{"location":"#creating-a-basic-shape","title":"Creating a basic shape","text":"<p>Lets create a 5x5x5 cube.</p> PythonOpenSCAD <pre><code># Create the cube object, and store it in variable \"c\"\nc = cube(5)\n# Or, more explicitely\nc = cube([5,5,5])\n# Display the cube\noutput(c)\n</code></pre> <pre><code>// Create the cube object\ncube(5);\n// Or, more explicitely\ncube([5,5,5]);\n// The cube is displayed implicitely\n</code></pre> <p>That was pretty easy! Next, let's see how to combine multiple shapes.</p>"},{"location":"combining_objects/","title":"Combining objects","text":""},{"location":"combining_objects/#displaying-multiple-shapes","title":"Displaying multiple shapes","text":"<p>If you tried calling output a second time, you will have noticed that is overwrites the previous call. For example: <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# We display the cube\noutput(cu)\n# We display the cylinder, which overwrites the previous output call\n# THE CUBE IS NO LONGER DISPLAYED\noutput(cy)\n</code></pre></p> <p>So how do we display multiple shapes? Simple! We pass them all to the output function using a list: <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Both objects are now displayed at once\noutput([cu,cy])\n</code></pre></p>"},{"location":"combining_objects/#combining-objects-with-union","title":"Combining objects with <code>union()</code>","text":"<p>Lets say you wanted to merge 2 objects into one, how could you do that? Well, you combine them with the <code>union()</code> method:</p> PythonOpenSCAD <pre><code># Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Create a third object that is a fusion of the cube and the cylinder\nfusion = cu.union(cy)\n# alternatively you can also write:\nfusion = union([cu, cy])\n# Display the new object\noutput(fusion)\n</code></pre> <pre><code>// Join the 2 objects into one\nunion() {    // Create a cube and a cylinder\ncube([5,5,5]);\ncylinder(5);\n}\n</code></pre> <p>One important thing to note is the fact the <code>union()</code> does NOT edit the objects in place. Rather, it creates a third brand new object. This means that:</p> <ul> <li>You must assign the union to a variable, just calling <code>cu.union(cy)</code> alone will have no effects on <code>cu</code> or <code>cy</code>.</li> <li>You keep access to the originals objects. For example, you could still display just the cube by using <code>output(cu)</code></li> </ul>"},{"location":"combining_objects/#substracting-objects-with-difference","title":"Substracting objects with <code>difference()</code>","text":"<p>You learned how to merge two objects into one, but what if you want to exclude an object from another? For that, you can use the <code>difference()</code> method:</p> PythonOpenSCAD <pre><code># Create a cube and a cylinder that overlap\ncu = cube([5,5,5], center = True)\ncy = cylinder(15, center = True)\n# Substract the cylinder from the cube\ndiff = cu.difference(cy)\n# Display the result\noutput(diff)\n</code></pre> <pre><code>// Use difference() to substract the cylinder from the cube\ndifference() {\n// Create a cube and a cylinder that overlap\ncube([5,5,5], center = true);\ncylinder(15, center = true);\n}\n</code></pre> <p>As you can see, this creates a cylinder-shaped hole in the cube!</p>"},{"location":"combining_objects/#using-operators","title":"Using operators","text":"<p>Using the <code>union</code> and <code>difference</code> method works great, but is a little heavy synthax-wise. You can instead simplify it by using operators! Operators can also be used to easily translate or scale solid</p> <p>Here is a table detailing which operator matches each method:</p> Operator Method | union two solids - difference two solids &amp; intersection of two solids * scale an solid with a value or a vector + translate an solid with a vector <p>So, reusing our earlier examples, you could write <pre><code>cu = cube([5,5,5])\ncy = cylinder(5)\n# Replaces cu.union(cy)\nfusion = cu + cy\noutput(fusion)\n</code></pre></p> <p>There are some more conveniance function to translate or rotate objects.</p> <pre><code>result = obj1.right(1).down(2) # directions are right, left, front, back, up, down\nresult2 = obj2.rotz(30) # 30 degrees, there is rotx, roty, rotz\n</code></pre> <p>Now that we know how to combine objects, lets see how we can position them.</p>"},{"location":"positioning_objects/","title":"Positioning objects","text":"<p>To move an object, you can simply use the <code>translate()</code> method:</p> PythonOpenSCAD <pre><code># Create two cubes\nc1 = cube([5,5,5])\nc2 = cube([3,3,10])\n# Translate the cube by 7 units up\nc2 = c2.translate([0,0,7])\n# Display the result\nresult = c1 + c2\noutput(result)\n</code></pre> <pre><code>// Create the first cube\ncube([5,5,5]);\n// Create the second cube, and apply\n// a translation of 7 units up\ntranslate([0,0,7])\ncube([3,3,10]);\n</code></pre> <p>Notice how we assign the result of the <code>translate()</code> method back into c2. This is because just like the <code>union()</code> and <code>difference()</code> methods we saw earlier, this method return a brand new object.</p> <p>Another option to  position an object is to rotate it. You can do that with the 'rotate()'  method.</p> PythonOpenSCAD <pre><code># Create a cube\nc = cube([5,5,5])\nrotated=c.rotate([10,0,-30])\n# rotate 10 degrees around X axis, not in Y and -30 around Z axis finally\noutput(rotated)\n</code></pre> <pre><code>// rotate 10 degrees around X axis, not in Y and -30 around Z axis finally\nrotate([10,0,-30])\ncube([5,5,5]);\n</code></pre> <p>One advantage of python language over the OpenSCAD is that you specify the build processes in several tiny steps without having to use  hierarchy</p> <p>Lets now spot the tiny differences between openSCAD and python here.</p>"},{"location":"python_specialities/","title":"Python Specialities","text":""},{"location":"python_specialities/#special-variables","title":"Special Variables","text":"<p>In Python the well known $fn, $fa  and $fs don't exist. Generally there are no $ variables needed as python variables can be overwritten any time. To access $fn, $fa, $fs, simply set global fn, fa, fs variable respectively.</p>"},{"location":"python_specialities/#import-existing-files","title":"Import existing files","text":"<p>'import()' cannnot be reused in python-openscad as its a python keyword. use 'os_import()' instead.</p>"},{"location":"python_specialities/#storing-data-along-solids","title":"Storing Data along Solids","text":"<p>Its possible to store arbritary data along with solids</p> Python <pre><code># Create the cube object, and store it in variable \"c\"\nc = cube([10,10,2])\n# give it a name\nc['name']=\"Fancy cube\"]\n# specify coordinates\nc['top_middle']=[5,5,2]\n# Display the cube\noutput(c)\n# Retrieve  Data\nprint(\"The Name of the Cube is \"%(c['name']))\n</code></pre>"},{"location":"python_specialities/#object-oriented-coding-style","title":"Object oriented coding style","text":"<p>Most of the Object manipulation function are available in two different flavors: functions and methods.</p> Python <pre><code># Create a green cylinder with functions\ncy=cylinder(r=2,h=10)\ncy_green=color(cy,\"green\")\n# or more simple:\n# cy_green = color(cylinder(r=2,h=10),\"green\")\n# Now create a red sphere with methods\nsp=sphere(r=2)\nsp_red = sp.color(\"red\")\n# or more simple:\n# sp_red = sphere(r=2).color(\"red\")\n# method flavor deems to be more readble \n# Now output everything\n# use solids in lists to implicitely union them\noutput([sp_red, cy_green.translate([10,0,0]] )\n# here is yet another method ....\n</code></pre>"},{"location":"python_together/","title":"Python together with OpenSCAD","text":"<p>Very likely you don't want to give up the amazing libraries with exist in OpenSCAD language only. Just use them. Its very simple to mix OpenSCAD and python language.</p> <p>For that just write 'use  in your OpenSCAD script. Then you will be able to use your beloved libraries and at the same time  make use of your Python scripts. <p>Check out this sample:</p> OpenSCADPython <pre><code>// Traditionally use was used to source content from other files which are not on the very toplevel, like modules\n// use &lt;file.scad&gt; --- this will only load things defined in the file (OpenSCAD modules)\n// include &lt;file.scad&gt; --- this will also execute OpenSCAD code, which is sitting the the root of the sourced file\n// now with this fork you can simple type\nuse &lt;pythonlib.py&gt;\n// and call functions like\necho(python_add(1,2));\n// or call modules like this\npython_cube(3);\n// but you can also just call a python function with\nmy_python_func(\"message\")\n</code></pre> <pre><code># this is file pythonlib.py and it defines the python functions referred above\ndef python_add(a,b):\nreturn a+b\ndef python_cube(size): # you could use any number of parameters\n# numbers, strings and even arrays are supported\nreturn cube([size,size,1]) # My special sizing requirement\ndef my_python_func(text):\nfd=fopen(\"myfile\",\"w\")\n# you could write text to this file if you wanted\n# just dont return a solid here as you dont have one...\n</code></pre>"}]}